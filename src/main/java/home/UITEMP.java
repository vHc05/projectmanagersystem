/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package home;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author Alumno
 */
public class UITEMP extends javax.swing.JPanel {

    /**
     * Creates new form UITEMP
     */
    private String filename = "proyectos.json";
    public ProyectoManager  proyectoManager= new ProyectoManager(); 
    public DefaultListModel<Object> listModel = new DefaultListModel<>();
    
    public UITEMP() {
        initComponents();   
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        projectList =  new JList<>(listModel);
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        saveFileButton = new javax.swing.JButton();

        jScrollPane1.setViewportView(projectList);

        jButton1.setText("Cargar Archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Añadir Proyecto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Eliminar Proyecto");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Modificar Proyecto");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CSV", "JSON", "XML" }));

        jLabel1.setText("Seleccione la extesión con la que quiere guardar el archivo: ");

        saveFileButton.setText("Descargar Archivo");
        saveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(saveFileButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int index = projectList.getSelectedIndex();
        if (index >= 0) {
            Proyecto proyecto = proyectoManager.getProyectos().get(index);
            int confirm = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro de que desea eliminar el proyecto \"" + proyecto.getNombre() + "\"?",
                    "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                proyectoManager.eliminarProyecto(proyecto.getNombre());
                actualizarDisplay();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                                     
    // Crear un JFileChooser para seleccionar el archivo
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Seleccionar archivo");  // Título del diálogo
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);  // Solo permitir seleccionar archivos

    // Filtrar solo los archivos con las extensiones permitidas
    fileChooser.setAcceptAllFileFilterUsed(false);
    fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Archivos CSV", "csv"));
    fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Archivos JSON", "json"));
    fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Archivos XML", "xml"));
    
    // Mostrar el diálogo de selección de archivo
    int result = fileChooser.showOpenDialog(this);

    // Verificar si el usuario ha seleccionado un archivo (no ha cancelado)
    if (result == JFileChooser.APPROVE_OPTION) {
        // Obtener la ruta del archivo seleccionado
        File selectedFile = fileChooser.getSelectedFile();
        String filePath = selectedFile.getAbsolutePath();  // Obtener la ruta completa del archivo

        try {
            // Ahora que tenemos la ruta del archivo, verificamos su extensión
            if (filePath.endsWith(".csv")) {
                proyectoManager.cargarDesdeCSV(filePath);
            } else if (filePath.endsWith(".json")) {
                proyectoManager.cargarDesdeJSON(filePath);
            } else if (filePath.endsWith(".xml")) {
                proyectoManager.cargarDesdeXML(filePath);
            } else {
                JOptionPane.showMessageDialog(this, "Formato de archivo no soportado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Actualizar la visualización de los proyectos
            actualizarDisplay();

            // Verificar si no se cargaron proyectos
            if (proyectoManager.getProyectos().isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay proyectos disponibles.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(UITEMP.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else {
        // Si el usuario cancela la selección del archivo
        JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún archivo.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         ProyectoForm form = new ProyectoForm();
        int result = JOptionPane.showConfirmDialog(this, form, "Agregar Proyecto",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            Proyecto nuevoProyecto = form.getProyecto();
            proyectoManager.agregarProyecto(nuevoProyecto);
            actualizarDisplay();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       int index = projectList.getSelectedIndex();
        if (index >= 0) {
            Proyecto proyectoActual = proyectoManager.getProyectos().get(index);
            ProyectoForm form = new ProyectoForm();
            form.setProyecto(proyectoActual);

            int result = JOptionPane.showConfirmDialog(this, form, "Modificar Proyecto",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                Proyecto proyectoModificado = form.getProyecto();
                proyectoManager.modificarProyecto(proyectoActual.getNombre(), proyectoModificado);
                actualizarDisplay();
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void saveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileButtonActionPerformed
        // Obtener la extensión seleccionada del JComboBox
    String formatoSeleccionado = (String) jComboBox1.getSelectedItem();
    
    // Abrir un cuadro de diálogo para seleccionar la ubicación del archivo
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar Archivo");
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    
    if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        String filePath = fileChooser.getSelectedFile().getAbsolutePath();
        
        // Asegurarnos de que el archivo tenga la extensión adecuada
        switch (formatoSeleccionado) {
            case "CSV":
                if (!filePath.endsWith(".csv")) {
                    filePath += ".csv";
                }
                try {
                    proyectoManager.guardarEnCSV(filePath);
                    JOptionPane.showMessageDialog(this, "Archivo guardado como CSV en: " + filePath);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al guardar CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            
            case "JSON":
                if (!filePath.endsWith(".json")) {
                    filePath += ".json";
                }
                try {
                    proyectoManager.guardarEnJSON(filePath);
                    JOptionPane.showMessageDialog(this, "Archivo guardado como JSON en: " + filePath);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al guardar JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            
            case "XML":
                if (!filePath.endsWith(".xml")) {
                    filePath += ".xml";
                }
                try {
                    proyectoManager.guardarEnXML(filePath);
                    JOptionPane.showMessageDialog(this, "Archivo guardado como XML en: " + filePath);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error al guardar XML: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;

            default:
                JOptionPane.showMessageDialog(this, "Formato no soportado.", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }
    }
    }//GEN-LAST:event_saveFileButtonActionPerformed

    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(UITEMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(UITEMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(UITEMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(UITEMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            // Crear el JFrame
            javax.swing.JFrame frame = new javax.swing.JFrame("Gestión de Proyectos");
            frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            // Crear una instancia del panel UITEMP
            UITEMP uiTempPanel = new UITEMP();

            // Añadir el panel UITEMP al JFrame
            frame.getContentPane().add(uiTempPanel);

            // Ajustar tamaño y hacer visible la ventana
            frame.pack();
            frame.setLocationRelativeTo(null); // Centra la ventana
            frame.setVisible(true);
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Object> projectList;
    private javax.swing.JButton saveFileButton;
    // End of variables declaration//GEN-END:variables

    private void actualizarDisplay() {
        listModel.clear();
        for (Proyecto p : proyectoManager.getProyectos()) {
            listModel.addElement(p.getNombre() + " - " + p.getResponsable() + " - " + p.getFechaInicio());
        }
    }

}
